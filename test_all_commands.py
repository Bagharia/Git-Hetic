#!/usr/bin/env python3
"""
Script de test pour v√©rifier toutes les commandes Git
Ce script teste toutes les fonctionnes disponibles dans le syst√®me Git
"""

import os
import sys
import subprocess
import tempfile
import shutil
from pathlib import Path

def run_command(cmd, description=""):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"\n{'='*60}")
    print(f"üß™ TEST: {description}")
    print(f"üìù Commande: python main.py {cmd}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(
            ["python", "main.py"] + cmd.split(),
            capture_output=True,
            text=True,
            cwd=os.getcwd()
        )
        
        print("‚úÖ Sortie standard:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è  Erreurs:")
            print(result.stderr)
        
        print(f"üìä Code de retour: {result.returncode}")
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå Erreur d'ex√©cution: {e}")
        return False

def create_test_files():
    """Cr√©e des fichiers de test"""
    print("\nüìÅ Cr√©ation des fichiers de test...")
    
    # Cr√©er un fichier de test
    with open("test_file.txt", "w") as f:
        f.write("Ceci est un fichier de test\n")
    
    # Cr√©er un sous-r√©pertoire avec un fichier
    os.makedirs("test_dir", exist_ok=True)
    with open("test_dir/subfile.txt", "w") as f:
        f.write("Fichier dans un sous-r√©pertoire\n")
    
    # Modifier le fichier existant
    with open("fichier.txt", "w") as f:
        f.write("Contenu modifi√© du fichier\n")
    
    print("‚úÖ Fichiers de test cr√©√©s")

def cleanup_test_files():
    """Nettoie les fichiers de test"""
    print("\nüßπ Nettoyage des fichiers de test...")
    
    test_files = ["test_file.txt", "test_dir"]
    for file in test_files:
        if os.path.exists(file):
            if os.path.isdir(file):
                shutil.rmtree(file)
            else:
                os.remove(file)
    
    print("‚úÖ Fichiers de test supprim√©s")

def test_all_commands():
    """Teste toutes les commandes disponibles"""
    print("üöÄ D√âBUT DES TESTS GIT")
    print("="*60)
    
    # Initialisation
    print("\n1Ô∏è‚É£  INITIALISATION DU D√âP√îT")
    success = run_command("init", "Initialisation d'un nouveau d√©p√¥t Git")
    if not success:
        print("‚ùå √âchec de l'initialisation - arr√™t des tests")
        return False
    
    # Cr√©ation des fichiers de test
    create_test_files()
    
    # Test des commandes de base
    print("\n2Ô∏è‚É£  TESTS DES COMMANDES DE BASE")
    
    # Status initial
    run_command("status", "√âtat initial du d√©p√¥t")
    
    # Hash-object
    run_command("hash-object test_file.txt", "Calcul du hash d'un fichier")
    
    # Add
    run_command("add test_file.txt", "Ajout d'un fichier √† l'index")
    run_command("add test_dir/subfile.txt", "Ajout d'un fichier dans un sous-r√©pertoire")
    run_command("add fichier.txt", "Ajout du fichier modifi√©")
    
    # Status apr√®s add
    run_command("status", "√âtat apr√®s ajout des fichiers")
    
    # Ls-files
    run_command("ls-files", "Liste des fichiers dans l'index")
    
    # Write-tree
    tree_result = run_command("write-tree", "Cr√©ation de l'arbre √† partir de l'index")
    
    # Commit-tree (si write-tree a r√©ussi)
    if tree_result:
        # On r√©cup√®re le SHA de l'arbre depuis la sortie (√† adapter selon votre impl√©mentation)
        run_command("commit-tree <tree_sha> -m 'Premier commit'", "Cr√©ation du premier commit")
    
    # Commit
    run_command("commit -m 'Premier commit avec add'", "Commit avec la commande porcelain")
    
    # Show-ref
    run_command("show-ref", "Affichage des r√©f√©rences")
    
    # Log
    run_command("log", "Affichage de l'historique des commits")
    
    # Status apr√®s commit
    run_command("status", "√âtat apr√®s le premier commit")
    
    # Modification pour tester les changements
    print("\n3Ô∏è‚É£  TESTS DES MODIFICATIONS")
    
    with open("test_file.txt", "a") as f:
        f.write("Ligne ajout√©e pour tester les modifications\n")
    
    with open("new_file.txt", "w") as f:
        f.write("Nouveau fichier non track√©\n")
    
    run_command("status", "√âtat avec des modifications")
    
    # Add des modifications
    run_command("add test_file.txt", "Ajout des modifications")
    run_command("add new_file.txt", "Ajout du nouveau fichier")
    
    run_command("status", "√âtat apr√®s ajout des modifications")
    
    # Commit des modifications
    run_command("commit -m 'Deuxi√®me commit avec modifications'", "Commit des modifications")
    
    # Log final
    run_command("log", "Historique final")
    
    # Status final
    run_command("status", "√âtat final")
    
    # Test ls-tree (si on a des commits)
    print("\n4Ô∏è‚É£  TESTS AVANC√âS")
    
    # R√©cup√©rer le SHA du dernier commit pour ls-tree
    # Note: Cette partie peut n√©cessiter une adaptation selon votre impl√©mentation
    run_command("ls-tree <tree_sha>", "Affichage du contenu d'un arbre")
    
    # Test rev-parse
    run_command("rev-parse HEAD", "R√©solution de la r√©f√©rence HEAD")
    
    print("\nüéâ FIN DES TESTS")
    return True

def main():
    """Fonction principale"""
    print("üß™ SCRIPT DE TEST COMPLET POUR LE SYST√àME GIT")
    print("="*60)
    
    # V√©rifier que main.py existe
    if not os.path.exists("main.py"):
        print("‚ùå Erreur: main.py non trouv√© dans le r√©pertoire actuel")
        return 1
    
    # Sauvegarder l'√©tat initial
    initial_files = set(os.listdir("."))
    
    try:
        # Lancer tous les tests
        success = test_all_commands()
        
        if success:
            print("\n‚úÖ TOUS LES TESTS TERMIN√âS AVEC SUCC√àS")
        else:
            print("\n‚ùå CERTAINS TESTS ONT √âCHOU√â")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Tests interrompus par l'utilisateur")
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
    finally:
        # Nettoyage
        cleanup_test_files()
        
        # V√©rifier qu'on n'a pas laiss√© de fichiers de test
        current_files = set(os.listdir("."))
        new_files = current_files - initial_files
        if new_files:
            print(f"\n‚ö†Ô∏è  Fichiers cr√©√©s pendant les tests: {new_files}")
    
    print("\nüèÅ FIN DU SCRIPT DE TEST")
    return 0

if __name__ == "__main__":
    sys.exit(main()) 